#!/bin/bash

if [[ ! -f ./server-signing-config.json ]]; then

# set up ca
# This produces a CA key file (ca-key.pem) and certificate (ca.pem)
# ca.pem can be used as the trust root to verify the serving certificate

cat <<EOF | cfssl gencert -initca | cfssljson -bare ca
{
    "CN": "staging cluster",
    "key": {
        "algo": "rsa",
        "size": 2048
    }
}
EOF

cat > server-signing-config.json << JSON
{
    "signing": {
        "default": {
            "usages": [
                "digital signature",
                "key encipherment"
                "server auth"
            ],
            "expiry": "876000h",
            "ca_constraint": {
                "is_ca": false
            }
        }
    }
}
JSON

fi

signcert() {
name="$1"

mkdir "$name"
cd "$name"

cat <<EOF | cfssl genkey - | cfssljson -bare server
{
    "CN": "$name",
    "key": {
        "algo": "ecdsa",
        "size": 256
    }
}
EOF

cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: $name
spec:
  request: $(cat server.csr | base64 | tr -d '\n')
  signerName: $name/serving
  usages:
  - digital signature
  - key encipherment
  - server auth
EOF

kubectl certificate approve $name


kubectl get csr $name -o jsonpath='{.spec.request}' | base64 -d | \
cfssl sign -ca ../ca.pem -ca-key ../ca-key.pem -config ../server-signing-config.json - | \
cfssljson -bare ca-signed-server


kubectl get csr $name -o json | \
jq '.status.certificate = "'$base64 ca-signed-server.pem | tr -d '\n')'"' | \
kubectl replace --raw /apis/certificates.k8s.io/v1/certificatesigningrequests/$name/status -f -

kubectl get csr $name -o jsonpath='{.status.certificate}' | base64 -d > server.crt

kubectl create secret tls $name.cert --cert server.crt --key server-key.pem
}

signcert "$1"